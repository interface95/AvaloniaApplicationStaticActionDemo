name: Build and Publish AOT

on:
  push:
    tags:
      - 'v*'  # 仅在发布版本标签时触发
  workflow_dispatch:

permissions:
  contents: write
  actions: read

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'AvaloniaApplicationStaticActionDemo/AvaloniaApplicationStaticActionDemo.csproj'

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            artifact-name: AvaloniaApplicationStaticActionDemo-win-x64
            executable-ext: .exe

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for accurate commit count

    - name: Generate Version
      id: version
      shell: bash
      run: |
        # Generate version based on tag
        GIT_HASH=$(git rev-parse --short HEAD)
        BUILD_DATE=$(date +'%Y%m%d')
        
        # Extract version from tag (e.g., v1.0.0 -> 1.0.0)
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          # Fallback to commit count if no tag
          MAJOR_VERSION=1
          MINOR_VERSION=0
          BUILD_NUMBER=$(git rev-list --count HEAD)
          VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER}"
        fi
        
        FULL_VERSION="${VERSION}.0"

        echo "Generated version: ${VERSION}"
        echo "Full version: ${FULL_VERSION}"
        echo "Git hash: ${GIT_HASH}"
        echo "Build date: ${BUILD_DATE}"

        # Set outputs and environment variables
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "full_version=${FULL_VERSION}" >> $GITHUB_OUTPUT
        echo "git_hash=${GIT_HASH}" >> $GITHUB_OUTPUT
        echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        echo "tag_name=v${VERSION}" >> $GITHUB_OUTPUT

        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "FULL_VERSION=${FULL_VERSION}" >> $GITHUB_ENV
        echo "GIT_HASH=${GIT_HASH}" >> $GITHUB_ENV
        echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_ENV

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup MSVC
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Configure NuGet sources
      run: |
        echo "🔧 配置 NuGet 包源..."
        
        # Clear existing sources and add nuget.org and Avalonia nightly
        dotnet nuget remove source nuget.org || true
        dotnet nuget add source https://api.nuget.org/v3/index.json --name nuget.org
        
        # Add Avalonia nightly feed for latest packages
        echo "📦 添加 Avalonia 夜间构建源..."
        dotnet nuget add source https://nuget-feed-nightly.avaloniaui.net/v3/index.json --name AvaloniaNightly

        echo "✅ 已配置的包源:"
        dotnet nuget list source
      shell: bash

    - name: Restore dependencies
      run: |
        echo "📥 开始恢复项目依赖..."
        echo "⏳ 这可能需要几分钟时间..."
        dotnet restore ${{ env.PROJECT_PATH }} --verbosity detailed
        echo "✅ 依赖恢复完成!"
      shell: bash

    - name: Publish AOT
      run: |
        echo "🚀 开始 AOT 编译和静态链接..."
        echo "⏱️  首次构建可能需要 15-30 分钟"
        echo "📦 嵌入所有依赖库到单个可执行文件..."
        echo "🔧 编译为原生代码并静态链接..."
        echo "💡 Windows 版本将使用 UPX 压缩，macOS/Linux 不支持"
        
        dotnet publish ${{ env.PROJECT_PATH }} -r ${{ matrix.runtime }} -c Release -o publish/${{ matrix.runtime }} -p:Version=${{ env.VERSION }} -p:AssemblyVersion=${{ env.FULL_VERSION }} -p:FileVersion=${{ env.FULL_VERSION }} --verbosity normal
          
        echo "✅ AOT 编译完成!"
        echo "📊 检查输出文件大小..."
        if [ -f "publish/${{ matrix.runtime }}/AvaloniaApplicationStaticActionDemo.exe" ]; then
          size=$(stat -f%z "publish/${{ matrix.runtime }}/AvaloniaApplicationStaticActionDemo.exe" 2>/dev/null || stat -c%s "publish/${{ matrix.runtime }}/AvaloniaApplicationStaticActionDemo.exe" 2>/dev/null)
          echo "📁 可执行文件大小: $(( size / 1024 / 1024 )) MB"
        fi
      timeout-minutes: 60
      shell: bash


    - name: Remove debug files (Windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        echo "Cleaning Windows debug files to reduce size..."
        Get-ChildItem -Path "publish/${{ matrix.runtime }}" -Filter "*.pdb" -Recurse | Remove-Item -Force
        echo "Windows debug files cleaned successfully"
      shell: powershell

    - name: Prepare Windows artifacts (Windows only)
      if: startsWith(matrix.os, 'windows')
      run: |
        echo "Preparing Windows release package..."
        
        # 创建原始版本
        Compress-Archive -Path "publish/${{ matrix.runtime }}/*" -DestinationPath "${{ matrix.artifact-name }}-v${{ env.VERSION }}.zip"
        
        # 使用 7-Zip 创建高压缩版本
        if (Test-Path "publish/${{ matrix.runtime }}/AvaloniaApplicationStaticActionDemo.exe") {
          & "C:\Program Files\7-Zip\7z.exe" a -y -mx9 "${{ matrix.artifact-name }}-v${{ env.VERSION }}-compressed.7z" "publish/${{ matrix.runtime }}/*"
          echo "High compression package created: ${{ matrix.artifact-name }}-v${{ env.VERSION }}-compressed.7z"
        }
        
        echo "Windows release packages created:"
        echo "- ${{ matrix.artifact-name }}-v${{ env.VERSION }}.zip"
        echo "- ${{ matrix.artifact-name }}-v${{ env.VERSION }}-compressed.7z"
      shell: powershell

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          ${{ matrix.artifact-name }}-v${{ env.VERSION }}.zip
          ${{ matrix.artifact-name }}-v${{ env.VERSION }}-compressed.7z
        retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate Version
      id: version
      shell: bash
      run: |
        # Generate version based on tag
        GIT_HASH=$(git rev-parse --short HEAD)
        BUILD_DATE=$(date +'%Y%m%d')
        
        # Extract version from tag (e.g., v1.0.0 -> 1.0.0)
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          # Fallback to commit count if no tag
          MAJOR_VERSION=1
          MINOR_VERSION=0
          BUILD_NUMBER=$(git rev-list --count HEAD)
          VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER}"
        fi
        
        FULL_VERSION="${VERSION}.0"

        echo "Generated version: ${VERSION}"
        echo "Full version: ${FULL_VERSION}"
        echo "Git hash: ${GIT_HASH}"
        echo "Build date: ${BUILD_DATE}"

        # Set outputs and environment variables
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "full_version=${FULL_VERSION}" >> $GITHUB_OUTPUT
        echo "git_hash=${GIT_HASH}" >> $GITHUB_OUTPUT
        echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
        echo "tag_name=v${VERSION}" >> $GITHUB_OUTPUT

        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "FULL_VERSION=${FULL_VERSION}" >> $GITHUB_ENV
        echo "GIT_HASH=${GIT_HASH}" >> $GITHUB_ENV
        echo "BUILD_DATE=${BUILD_DATE}" >> $GITHUB_ENV

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Tag and Release
      run: |
        echo "🏷️  创建发布标签..."
        # Create and push tag
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ env.VERSION }}" -m "Release ${{ env.VERSION }}"
        git push origin "${{ env.VERSION }}"
        echo "✅ 发布标签创建完成: ${{ env.VERSION }}"

    - name: Prepare Release Info
      run: |
        echo "📦 准备创建 GitHub 发布..."
        echo "🏷️  版本: ${{ env.VERSION }}"
        echo "📅 构建日期: ${{ env.BUILD_DATE }}"
        echo "🔗 Git 提交: ${{ env.GIT_HASH }}"
        echo "📁 发布文件: artifacts/*/*-v${{ env.VERSION }}.zip"

    - name: Create Release with Assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        draft: false
        prerelease: false
        files: |
          artifacts/*/*-v${{ env.VERSION }}.zip
          artifacts/*/*-v${{ env.VERSION }}-compressed.7z
        body: |
          ## Avalonia Static Action Demo v${{ env.VERSION }}

          **Build Date**: ${{ env.BUILD_DATE }}
          **Git Commit**: ${{ env.GIT_HASH }}

          ### Downloads
          - **Windows x64 (ZIP)**: AvaloniaApplicationStaticActionDemo-win-x64-v${{ env.VERSION }}.zip
          - **Windows x64 (7Z 高压缩)**: AvaloniaApplicationStaticActionDemo-win-x64-v${{ env.VERSION }}-compressed.7z

          ### Features
          - Avalonia UI desktop application with SkiaSharp
          - Cross-platform .NET 9 AOT compiled for optimal performance
          - High-performance 2D graphics with SkiaSharp
          - Automatic version numbering based on commit count

          ### Installation
          1. Download the appropriate file for your platform
          2. Extract the contents to your desired location
          3. Run the executable directly (no installation required)

          ### System Requirements
          - **Windows**: Windows 10 or later (x64)

          ### Version History
          This is an automatically generated release based on commit #${{ env.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
